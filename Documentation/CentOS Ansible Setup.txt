CentOS Ansible Install and Setup to configure a Windows Hosts on Hyper-V 
========================================
Prereq
========================================
    -Download CentOS: 
        https://www.centos.org/download/

    -Install Linux Distro on Hyper-V
        -Download ISO and mount

    -Update system
        cmd: sudo yum update -y

    -Install unzip
        cmd: sudo yum install unzip -y

    -Install Wget(retrieve content from web servers)
        cmd: sudo install wget -y

    -Install nano(text editor)
        cmd: sudo yum install -y nano 

    -Install open-ssh(unless using OS on cloud provider)
        Doc: https://phoenixnap.com/kb/how-to-enable-ssh-centos-7
        sudo yum â€“y install openssh-server openssh-clients
    
    Optional: 
        -Install hyper-v tools (powershell hyper v integration)
            cmd: sudo yum install -y hyperv-daemons
        -Install scoop (powershell customizer)
            Note: Can be used to install openssh for remoting into Linux VM(very helpful)
            cmd: Set-ExecutionPolicy RemoteSigned -scope CurrentUser
            cmd: Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
            
========================================
Ansible Install on Master Node(CentOS)
========================================
1) Install python
    NOTE: 'DNF' stands for dandified yum, package manager for RPM based linux distros
    cmd : sudo yum -y install python3

2) Install pip(python package manager)
    cmd : sudo yum -y install python3-pip

3) Add Epel repo 
        NOTE: The EPEL repository is an additional package repository that provides easy access to install packages for commonly used software
            cmd : sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
            cmd : sudo yum -y install epel-release

4) Install Ansible 
    cmd: sudo yum install ansible

5) Install python winrm libraries to connect to windows hosts
    NOTE: Requires 1 additional powershell script to be run on the windows host to configure
    cmd: sudo yum install python-winrm

Windows connection Test

    1) Configure hosts file to specify windows credentials
        NOTE: Hosts file can be pointed to with the '-i' param
        example:

        [srv]
        192.168.1.xxx

        [srv:vars]
        ansible_user=<windows user>
        ansible_password=<password>
        ansible_connection=winrm
        ansible_winrm_server_cert_validation=ignore

    2)  Test Connection to node 
        NOTE: win_ping is specific for windows hosts
        cmd: ansible all -i /etc/ansible/hosts_win -m win_ping

Linux connection test

    1) Configure hosts file to specify windows credentials
        NOTE: Hosts file can be pointed to with the '-i' param
        example:

        [srv]
        192.168.1.xxx

        [srv:vars]
        ansible_user=<windows user>
        ansible_password=<password>
        ansible_connection=ssh

    2) Add the line to the ansible.cfg
       NOTE: This enables username and pass auth with ssh connection to remote hosts
       Add line under [defaults] block: 

        host_key_checking = false
     
     NOTE: This can also be a environment variable:
        export ANSIBLE_HOST_KEY_CHECKING=False
    
    3) Test Connection to linux host: 
        cmd: ansible all -i /etc/ansible/hosts_lin -m ping
   


========================================
Ansible Config on Windows Node
========================================
1) Run ConfigureRemotingForAnsible.ps1 on windows host to configure ansible for windows
    Creates: 
        basic auth support
        enable ssl listener
        enables psremoting
        adds firewall rule to allow winrm https

========================================
Configure and test playbook
========================================
windows Playbook
    1) Create Projects Directory in Ansible root
        cmd: mkdir /etc/ansible/Playbooks

    2) Create Playbook
        cmd: sudo nano testplaybook.yml
            playbook: 
            ---
            - hosts: srv

            tasks:

            - name: Copy File

                win_copy:

                src: C:\temp\Tests.txt

                dest: C:\Users\Administrator\temp\

                remote_src: yes
            ...

    3) Run test playbook
        NOTE: Ensure the test file exists in src dir on remote host
        NOTE: 'ansiple-playbook --help' will provide more arguments 
            cmd: ansible-playbook /etc/ansible/playbooks/testplaybook.yml

Linux Playbooks
    1) If not already created, make a Projects directory in Ansible root
        cmd: mkdir /etc/ansible/Playbooks
    
    2) Create Playbook: 
        example: 
    ---
    - hosts: all
      become: yes
      tasks:
      - name: Echo the path to a tmp file
        shell: echo $PATH > /tmp/thing1.txt
      - name: Echo String to a tmp file
        shell: echo  "This is a test" > /tmp/thing2.txt
    ...

    3) To specify sudo password: 
        a) ansible-playbook <playbook.yml> -K 
        b) ansible-playbook -i hostlin /etc/ansible/Playbooks/lintest.yml --extra-vars 'ansible_become_pass=passhere'
        
        Ansible vault method:
        a) update inventory/hosts file to look like below:
        NOTE: pay attention to the defined variable on thelast line
            [lnxsrv]
            10.0.1.xxx

            [lnxsrv:vars]
            ansible_user=xxxx
            ansible_password=xxxx
            ansible_connection=ssh
            #for vault pass 
            ansible_become=yes  # use sudo 
            ansible_become_method=sudo 
            ansible_become_pass='{{ my_pass }}'

        b) create secret/password vault file:
            NOTE: This file will remain encrypted.  
                cmd: sudo ansible-vault create passwd.yml
            NOTE: To edit secret
                cmd: ansible-vault edit passwd.yml
            -Enter password, you will need this to read form the file
        c) add password to file: 
            ex) my_pass: mysudopassword

        d) create vault password file
            create vault.txt
                cmd: nano vault.txt
            -add password for the secret file as one line as a string
            -save file

        e) Run playbook using password file  
          cmd: ansible-playbook -i hostlin /etc/ansible/Playbooks/lintest.yml --vault-password-file=./vault.txt --extra-vars '@passwd.yml'
        f) Run playbook without password file(skipping step d above)
          cmd: ansible-playbook -i hostlin /etc/ansible/Playbooks/lintest.yml --ask-vault-pass --extra-vars '@passwd.yml'

        Linux Enable playbooks without specifying sudo pass
            requires sudo user
            requires sudoers file manipulation
            doc: https://www.cyberciti.biz/faq/how-to-set-and-use-sudo-password-for-ansible-vault/
            doc: https://phoenixnap.com/kb/how-to-create-add-sudo-user-centos#:~:text=%20How%20to%20Add%20Users,User%20to%20Group%20More 

========================================
Helpful Documentation: 
========================================
Connecting to windows host
    https://www.ansible.com/blog/connecting-to-a-windows-host
Windows playbook example
    https://geekflare.com/ansible-playbook-windows-example/
Ansible Fact Cache 
    https://docs.ansible.com/ansible/latest/plugins/cache.html
Basic Linux Playbook examples
    https://techexpert.tips/ansible/ansible-playbook-examples-ubuntu-linux/
    https://networknuts.net/basic-ansible-playbooks/ 
Linux Sudoers Addition for passwordless playbooks
https://phoenixnap.com/kb/how-to-create-add-sudo-user-centos#:~:text=%20How%20to%20Add%20Users,User%20to%20Group%20More
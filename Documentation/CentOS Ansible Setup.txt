Ansible Install and Setup for debian based linux distributions(CentOS, RHEL)
========================================
Prereq
========================================
    -Download CentOS ISO: 
        https://www.centos.org/download/

    -Install Linux Distro on Hyper-V
        -Download ISO and mount

    -Update system
        cmd: sudo yum update -y

    -Install unzip
        cmd: sudo yum install unzip -y

    -Install Wget(retrieve content from web servers)
        cmd: sudo install wget -y

    -Install nano(text editor)
        cmd: sudo yum install -y nano 

    -Install open-ssh(unless using OS on cloud provider)
        Doc: https://phoenixnap.com/kb/how-to-enable-ssh-centos-7
        sudo yum â€“y install openssh-server openssh-clients            
========================================
Ansible Install on Master Node(CentOS)
========================================
1) Install python
    NOTE: 'DNF' stands for dandified yum, package manager for RPM based linux distros
    cmd : sudo yum -y install python3

2) Install pip(python package manager)
    cmd : sudo yum -y install python3-pip

3) Add Epel repo 
        NOTE: The EPEL repository is an additional package repository that provides easy access to install packages for commonly used software
            cmd : sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
            cmd : sudo yum -y install epel-release

4) Install Ansible 
    cmd: sudo yum install ansible

5) Install python winrm libraries to connect to windows hosts
    NOTE: Requires 1 additional powershell script to be run on the windows host to configure
    cmd: pip install pywinrm
    -or- 
    cmd: pip3 install pywinrm

Windows connection Test

    1) Configure hosts file to specify windows credentials
        NOTE: Hosts file can be pointed to with the '-i' param
        example:

        [srv]
        192.168.1.xxx

        [srv:vars]
        ansible_user=<windows user>
        ansible_password=<password>
        ansible_connection=winrm
        ansible_winrm_server_cert_validation=ignore

    2)  Test Connection to node 
        NOTE: win_ping is specific for windows hosts
        cmd: ansible all -i /etc/ansible/hosts_win -m win_ping

Linux connection test

    1) Configure hosts file to specify windows credentials
        NOTE: Hosts file can be pointed to with the '-i' param
        example:

        [srv]
        192.168.1.xxx

        [srv:vars]
        ansible_user=<windows user>
        ansible_password=<password>
        ansible_connection=ssh

    2) Add the line to the ansible.cfg
       NOTE: This enables username and pass auth with ssh connection to remote hosts
       Add line under [defaults] block: 

        host_key_checking = false
     
     NOTE: This can also be a environment variable:
        export ANSIBLE_HOST_KEY_CHECKING=False
    
    3) Test Connection to linux host: 
        cmd: ansible all -i /etc/ansible/hosts_lin -m ping
   
========================================
Ansible Config on Windows Node
========================================
1) Run ConfigureRemotingForAnsible.ps1(found on the internet and in official ansible docs) on windows host to configure ansible for windows
    Creates: 
        basic auth support
        enable ssl listener
        enables PSremoting
        adds firewall rule to allow winrm https

========================================
Configure and test playbook
========================================
windows Playbook
    1) Create Projects Directory in Ansible root
        cmd: mkdir /etc/ansible/Playbooks

    2) Create Playbook
        cmd: sudo nano testplaybook.yml
            playbook: 
            ---
            - hosts: srv

            tasks:

            - name: Copy File

                win_copy:

                src: C:\temp\Tests.txt

                dest: C:\Users\Administrator\temp\

                remote_src: yes
            ...

    3) Run test playbook
        NOTE: Ensure the test file exists in src dir on remote host
        NOTE: 'ansiple-playbook --help' will provide more arguments 
            cmd: ansible-playbook /etc/ansible/playbooks/testplaybook.yml

Linux Playbooks
    1) If not already created, make a Projects directory in Ansible root
        cmd: mkdir /etc/ansible/Playbooks
    
    2) Create Playbook: 
        example: 
    ---
    - hosts: all
      become: yes
      tasks:
      - name: Echo the path to a tmp file
        shell: echo $PATH > /tmp/thing1.txt
      - name: Echo String to a tmp file
        shell: echo  "This is a test" > /tmp/thing2.txt
    ...

    3) To specify sudo password: 
        a) ansible-playbook <playbook.yml> -K 
        b) ansible-playbook -i hostlin /etc/ansible/Playbooks/lintest.yml --extra-vars 'ansible_become_pass=passhere'
        
        Ansible vault method:
        a) update inventory/hosts file to look like below:
        NOTE: pay attention to the defined variable on thelast line
            [lnxsrv]
            10.0.1.xxx

            [lnxsrv:vars]
            ansible_user=xxxx
            ansible_password=xxxx
            ansible_connection=ssh
            #for vault pass 
            ansible_become=yes  # use sudo 
            ansible_become_method=sudo 
            ansible_become_pass='{{ my_pass }}'

        b) create secret/password vault file:
            NOTE: This file will remain encrypted.  
                cmd: sudo ansible-vault create passwd.yml
            NOTE: To edit secret
                cmd: ansible-vault edit passwd.yml
            -Enter password, you will need this to read form the file
        c) add password to file: 
            ex) my_pass: mysudopassword

        d) create vault password file
            create vault.txt
                cmd: nano vault.txt
            -add password for the secret file as one line as a string
            -save file

        e) Run playbook using password file  
          cmd: ansible-playbook -i hostlin /etc/ansible/Playbooks/lintest.yml --vault-password-file=./vault.txt --extra-vars '@passwd.yml'
        f) Run playbook without password file(skipping step d above)
          cmd: ansible-playbook -i hostlin /etc/ansible/Playbooks/lintest.yml --ask-vault-pass --extra-vars '@passwd.yml'

        Linux Enable playbooks without specifying sudo pass
            requires sudo user
            requires sudoers file manipulation
            doc: https://www.cyberciti.biz/faq/how-to-set-and-use-sudo-password-for-ansible-vault/
            doc: https://phoenixnap.com/kb/how-to-create-add-sudo-user-centos#:~:text=%20How%20to%20Add%20Users,User%20to%20Group%20More 
========================================
Configure ansible configuration file(ansible.cfg)
for custom host file location
========================================

1) Ansible searches for the configuration file in the following order: 
        environment variable: ANSIBLE_CONFIG
        current directory:./ansible.cfg
        home directory: ~/.ansible.cfg
        default: /etc/ansible/ansible.cfg

2) In your local ansible directory create an ansible config file:
        cmd: touch ansible.cfg && nano ansible.cfg

3) You can add ansible specific information in the ansible.cfg file
   for this example we are going to add a custom inventory/hosts file location
        In ansible config file add:
        [defaults]
        inventory = /path/to/host/file

4) Now you can run a playbook or ping without specifying a inventory file with -i /path/to/inventory file
        cmd example: ansible all -m win_ping
        cmd example: ansible-playbook /path/to/playbook

========================================
Configure ansible playbook to work with ansible vault
========================================
1) Convert host/inventory file to YML if you are using a variable from that file location
    NOTE: You can also choose to configure a variable file to pull information from. 
    For this example we will replace the ansible_user and ansible_password from our hosts file
    -Hosts file as INI:
[srv]
192.168.1.131

[srv:vars]
ansible_user=administrator
ansible_password= password.oh.no!
ansible_port=5986
ansible_winrm_scheme=https
ansible_connection=winrm
ansible_winrm_server_cert_validation=ignore

    -Hosts file as YML:
---
all:
  hosts:
    srv:
      ansible_host: 192.168.1.131
  vars:
    ansible_user: administrator
    ansible_password: password.oh.no!
    ansible_port: 5986
    ansible_winrm_scheme: https
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore   
...

2) Run the ansible-vault command to create encrypted string to replace variable file
        cmd: ansible-vault encrypt_string --vault-id user1@prompt 'Password.for.your.user' --name 'ansible_password'
    -Enter decrypting password, this will be used whenever you want to decrypt credentials   
    -Copy output: 

          ansible_password: !vault |
          $ANSIBLE_VAULT;1.2;AES256;user1
          34346431313037393064623637343033323438376134313934316635383264346233663365396439
          6234353039343432383663643964306138306161373237630a646533396136376433656165333037
          36303438376230316631333331636234666361633137636430633366313733623739336163363064
          3862336165376335620a643264353430383563376430316639613938376437343361663032653865
          3639

    -Paste into hosts file: 

    ansible_user: administrator
    ansible_password: !vault |
          $ANSIBLE_VAULT;1.2;AES256;user1
          34346431313037393064623637343033323438376134313934316635383264346233663365396439
          6234353039343432383663643964306138306161373237630a646533396136376433656165333037
          36303438376230316631333331636234666361633137636430633366313733623739336163363064
          3862336165376335620a643264353430383563376430316639613938376437343361663032653865
          3639
    ansible_port: 5986

3) Run the playbook command to pull the vault credentials
        cmd: ansible-playbook -i hosts --vault-id user1@prompt ./playbooks/Ansible_to_windows.yml 

4) You can also save the credentials in a text file to be used. The file 
   can be stored in a location enforced with RBAC or encrypted with a shell script and decrypted for use at runtime.
    -Create password file:
        cmd: echo "123qwe" > ./tmp/pass_word_file
        
    -Use password file in ansible-playbook call:
        cmd: ansible-playbook -i hosts --vault-id user1@/tmp/pf ./playbooks/Ansible_to_windows.yml

5) This method can be used for any variables not just the ansible password. 
========================================
Helpful Tips
========================================
You can trouble shoot playbooks by adding a -v after a ansible command for additional logging
    -v for simple verbose logging up to -vvvv for additional information. 
        cmd: ansible -i hosts -m win_shell -a "get-process" -vvvv
        
========================================
Helpful Documentation: 
========================================
Connecting to windows host
    https://www.ansible.com/blog/connecting-to-a-windows-host
Windows playbook example
    https://geekflare.com/ansible-playbook-windows-example/
Ansible Fact Cache 
    https://docs.ansible.com/ansible/latest/plugins/cache.html
Basic Linux Playbook examples
    https://techexpert.tips/ansible/ansible-playbook-examples-ubuntu-linux/
    https://networknuts.net/basic-ansible-playbooks/ 
Linux Sudoers Addition for passwordless playbooks
https://phoenixnap.com/kb/how-to-create-add-sudo-user-centos#:~:text=%20How%20to%20Add%20Users,User%20to%20Group%20More

========================================
Additional Help if using HYPER-V
========================================
-Install hyper-v tools (powershell hyper v integration)
    cmd: sudo yum install -y hyperv-daemons
-Install scoop (powershell customizer)
    Note: Can be used to install openssh for remoting into Linux VM(very helpful)
    cmd: Set-ExecutionPolicy RemoteSigned -scope CurrentUser
    cmd: Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
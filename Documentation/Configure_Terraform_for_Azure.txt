==========================
Prereq
==========================
1) Terraform must be installed on the system.. in our case its centOS
2) Machine must have access to the internet
=========================================
There are various ways to connect to Az for this documentation we will use the service principal method 

Other Methods can be found in the terraform documentation here
    doc: https://www.terraform.io/docs/providers/azurerm/guides/service_principal_client_secret.html

======================================================
Configure Service Principle in AD( Using Azure Portal)
======================================================
    1) Create Az AD Domain
        -Log into portal and select Azure Active Directory

    2)Configure App Registration in AZ AD 
        Doc: https://www.terraform.io/docs/providers/azurerm/guides/service_principal_client_secret.html
        -Navigate to the Azure Active Directory overview within the Azure Portal 
        -Then select the App Registration blade
        -Click the New registration button at the top to add a new Application within Azure Active Directory
        -Set the following values then press Create:
            -Name = Terraform
            -Supported Account Types: Accounts in this organization only
            -Redirect URI = (blank)
        -Record the Application ID(client_id) and the Directory ID(tenant_id)
            -client_id = xxx
            -tenant_id = xxxx
        doc: https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal 

    3)Generate Client Secret for AZ AD App
        NOTE: This will be used for authentication
        -On the App Registration page select 'New Client Secret'
        -Select 'New Client Secret', Provide a discription and hit 'add'
        -Record the secret value: 
            client_secret = qg2dhp87~8pG6-oDxGUt1~dRcV~R.QSfw9
        NOTE: This string will only display once so record it!
        NOTE: This can be configured to expire

    4)Grant application access to manage resources in AZ Subscriptions
        -Navigate to subscription blade in AZ portal
        -Select Sub you want to use
        -Select Access Control > Add > Add role assignment
        -Select Role which grants appropriate permissions needed for service principal
            -NOTE: contributor role provides read/write
        -Add created service principal by searching for the one created earlier, 'Terraform'
        -Select Save

======================================================
Configure Terraform on CentOS: 
======================================================
    1)Set up .tf files to create azure resource 
        example:
            export ARM_CLIENT_ID="00000000-0000-0000-0000-000000000000"
            export ARM_CLIENT_SECRET="00000000-0000-0000-0000-000000000000"
            export ARM_SUBSCRIPTION_ID="00000000-0000-0000-0000-000000000000"
            export ARM_TENANT_ID="00000000-0000-0000-0000-000000000000"
            NOTE: It may be handy to create a shell script to set and unset these vars before and after a run

            -or- 

            set in .tf file
            example: 
            provider "azurerm" {
            # Whilst version is optional, we /strongly recommend/ using it to pin the version of the Provider being used      
            version = "=2.5.0"
            client_id       ="***"
            client_secret   ="***"
            subscription_id ="***"
            tenant_id       ="***"
            features {}
            }

    2)To seperate variables you can spread out terraform files:
        Files and thier contents: 
            -main.tf: 
                provider "azurerm" {
                # Whilst version is optional, we /strongly recommend/ using it to pin the version of the Provider being used      
                version = "=2.5.0"

                client_id       =var.client_id
                client_secret   =var.client_secret
                subscription_id =var.subscription_id
                tenant_id       =var.tenant_id

                features {}
                }

                resource "azurerm_resource_group" "rg" {
                name     = var.resourcegroup
                location = var.location
                }

            -providervars.tf: 

                variable "client_id"{
                        type = string
                        description = "Azure client ID"
                }
                variable "client_secret"{
                        type = string
                        description = "Azure client secret"
                }
                variable "subscription_id" {
                        type = string
                        description = "Azure subscription  ID"
                }
                variable "tenant_id"{
                        type = string
                        description = "Azure subscription  ID"
                }

            -variables.tf

                variable "location" {
                default = "eastus"
                }
                variable "resourcegroup" {
                default = "TerriformTest"
                }

            -terraform.tfvars:

                client_id       ="xxx"
                client_secret   ="xxx"
                subscription_id ="xxx"
                tenant_id       ="xxx"

    3)Test terraform build
        From Scripts dir: /etc/scripts/Terraform_Scripts/Azure
        sudo /usr/local/bin/terraform init 
        sudo /usr/local/bin/terraform plan 
        sudo /usr/local/bin/terraform apply
======================================================
Helpful Docs:
======================================================
Bootstrapping Azure Resources(variable file defs)
    https://medium.com/@gmusumeci/how-to-bootstrapping-azure-vms-with-terraform-c8fdaa457836 


